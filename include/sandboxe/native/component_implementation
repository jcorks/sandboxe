////////////////////////////////////
/////////////// NONSTANDARD IMPLEMENTATION 
  
void Native_Draw() {
    Draw();
}
  
void Native_Step() {
    Step();
}

void Native_InstallEvent(const std::string & tag, Sandboxe::Script::Runtime::Object * fn) {
    if (fn) {
        AddNonNativeReference(fn);
        InstallEvent(tag, NativeHandler, fn);
    } else {
        InstallEvent(tag);
    }
}

void Native_UninstallEvent(const std::string & tag) {
    UninstallEvent(tag);
}


void Native_EmitEvent(const std::string & evt, Dynacoe::Entity::ID id) {
    EmitEvent(evt, id);
}


bool Native_CanHandleEvent(const std::string & evt) {
    return CanHandleEvent(evt);
}

void Native_InstallHook(const std::string & name, Sandboxe::Script::Runtime::Object * fn) {
    AddNonNativeReference(fn);
    InstallHook(name, NativeHandler, fn);
}


void Native_UninstallHook(const std::string & name) {
    UninstallHook(name, NativeHandler);
}

void Native_InstallHandler(const std::string & name, Sandboxe::Script::Runtime::Object * fn){
AddNonNativeReference(fn);
    InstallHandler(name, NativeHandler, fn);
}

void Native_UninstallHandler(const std::string & name){
    UninstallHandler(name, NativeHandler);
}



std::vector<std::string> Native_GetKnownEvents(){
    return GetKnownEvents();
}

std::string Native_GetTag() {
    return GetTag();
}
void Native_SetTag(const std::string & s){
    SetTag(s);
}


std::string Native_GetInfo() {
    return info;
}

void Native_SetInfo(const std::string & str) {
    info = str;
}

void Native_SetDraw(bool b) {
    draw = b;
}
bool Native_GetDraw(){
    return draw;
}
void Native_SetStep(bool b){
    step = b;
}
bool Native_GetStep(){
    return step;
}
Dynacoe::Entity::ID Native_GetHostID() {
    return GetHostID();
}

void OnStep() {
    CallMethod("onStep");
}

void OnDraw() {
    CallMethod("onDraw");
}

void OnAttach() {
    CallMethod("onAttach");
}

void * Native_GetParentPtr() {
    return (void*)this;
}

Dynacoe::Component * Native_GetDynacoeComponent() {
    return dynamic_cast<Dynacoe::Component*>(this);
}




//////////////////////////////////////////
//////////////////////////////////////